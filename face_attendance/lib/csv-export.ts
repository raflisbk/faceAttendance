export interface CSVReportData {
  reportType: string
  data: {
    users: any[]
    classes: any[]
    attendanceRecords: any[]
    locations: any[]
    faceProfiles: any[]
  }
  dateRange: {
    startDate: Date | null
    endDate: Date | null
  }
  generatedBy: {
    id: string
    name: string
    email: string
    role: string
  }
}

// Helper function to escape CSV values
function escapeCSVValue(value: any): string {
  if (value === null || value === undefined) return ''

  const stringValue = String(value)

  // If value contains comma, newline, or quote, wrap in quotes and escape quotes
  if (stringValue.includes(',') || stringValue.includes('\n') || stringValue.includes('"')) {
    return `"${stringValue.replace(/"/g, '""')}"`
  }

  return stringValue
}

// Convert array of objects to CSV string
function arrayToCSV(data: any[], headers: string[]): string {
  const csvLines = [headers.join(',')]

  data.forEach(row => {
    const values = headers.map(header => {
      const keys = header.split('.')
      let value = row

      for (const key of keys) {
        value = value?.[key]
      }

      return escapeCSVValue(value)
    })
    csvLines.push(values.join(','))
  })

  return csvLines.join('\n')
}

export async function generateCSVReport(reportData: CSVReportData): Promise<Buffer> {
  const sections: string[] = []

  // Add report header
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
  const dateRange = reportData.dateRange.startDate && reportData.dateRange.endDate
    ? `${reportData.dateRange.startDate.toISOString().split('T')[0]} to ${reportData.dateRange.endDate.toISOString().split('T')[0]}`
    : 'All Time'

  sections.push(`Face Attendance System - ${reportData.reportType} Report`)
  sections.push(`Generated On: ${new Date().toLocaleString()}`)
  sections.push(`Generated By: ${reportData.generatedBy.name} (${reportData.generatedBy.email})`)
  sections.push(`Date Range: ${dateRange}`)
  sections.push('')

  // Users section
  if (reportData.data.users.length > 0) {
    sections.push('=== USERS ===')
    const userHeaders = ['id', 'name', 'email', 'role', 'status', 'studentId', 'staffId', 'phone', 'createdAt', 'lastLogin']
    const usersCSV = arrayToCSV(reportData.data.users.map(user => ({
      id: user.id,
      name: user.name || '',
      email: user.email,
      role: user.role,
      status: user.status,
      studentId: user.studentId || '',
      staffId: user.staffId || '',
      phone: user.phone || '',
      createdAt: user.createdAt ? new Date(user.createdAt).toLocaleString() : '',
      lastLogin: user.lastLogin ? new Date(user.lastLogin).toLocaleString() : ''
    })), userHeaders)
    sections.push(usersCSV)
    sections.push('')
  }

  // Classes section
  if (reportData.data.classes.length > 0) {
    sections.push('=== CLASSES ===')
    const classHeaders = ['id', 'name', 'code', 'description', 'lecturerName', 'lecturerEmail', 'locationName', 'building', 'duration', 'capacity', 'isActive', 'enrollments', 'attendances']
    const classesCSV = arrayToCSV(reportData.data.classes.map(cls => ({
      id: cls.id,
      name: cls.name,
      code: cls.code,
      description: cls.description || '',
      lecturerName: cls.lecturer?.name || '',
      lecturerEmail: cls.lecturer?.email || '',
      locationName: cls.location?.name || '',
      building: cls.location?.building || '',
      duration: cls.duration || '',
      capacity: cls.capacity || '',
      isActive: cls.isActive ? 'Yes' : 'No',
      enrollments: cls._count?.enrollments || 0,
      attendances: cls._count?.attendances || 0
    })), classHeaders)
    sections.push(classesCSV)
    sections.push('')
  }

  // Attendance Records section
  if (reportData.data.attendanceRecords.length > 0) {
    sections.push('=== ATTENDANCE RECORDS ===')
    const attendanceHeaders = ['id', 'studentName', 'studentId', 'studentEmail', 'className', 'classCode', 'lecturerName', 'timestamp', 'method', 'isValid', 'confidenceScore', 'wifiSsid', 'ipAddress', 'notes']
    const attendanceCSV = arrayToCSV(reportData.data.attendanceRecords.map(attendance => ({
      id: attendance.id,
      studentName: attendance.user?.name || '',
      studentId: attendance.user?.studentId || '',
      studentEmail: attendance.user?.email || '',
      className: attendance.class?.name || '',
      classCode: attendance.class?.code || '',
      lecturerName: attendance.class?.lecturer?.name || '',
      timestamp: attendance.timestamp ? new Date(attendance.timestamp).toLocaleString() : '',
      method: attendance.method || '',
      isValid: attendance.isValid ? 'Valid' : 'Invalid',
      confidenceScore: attendance.confidenceScore || '',
      wifiSsid: attendance.wifiSsid || '',
      ipAddress: attendance.ipAddress || '',
      notes: attendance.notes || ''
    })), attendanceHeaders)
    sections.push(attendanceCSV)
    sections.push('')
  }

  // Locations section
  if (reportData.data.locations.length > 0) {
    sections.push('=== LOCATIONS ===')
    const locationHeaders = ['id', 'name', 'building', 'floor', 'room', 'wifiSsid', 'capacity', 'isActive', 'classesCount', 'coordinates']
    const locationsCSV = arrayToCSV(reportData.data.locations.map(location => ({
      id: location.id,
      name: location.name,
      building: location.building,
      floor: location.floor,
      room: location.room,
      wifiSsid: location.wifiSsid || '',
      capacity: location.capacity || '',
      isActive: location.isActive ? 'Active' : 'Inactive',
      classesCount: location._count?.classes || 0,
      coordinates: location.gpsCoordinates
        ? `${location.gpsCoordinates.latitude}, ${location.gpsCoordinates.longitude}`
        : ''
    })), locationHeaders)
    sections.push(locationsCSV)
    sections.push('')
  }

  // Face Profiles section
  if (reportData.data.faceProfiles.length > 0) {
    sections.push('=== FACE PROFILES ===')
    const faceProfileHeaders = ['id', 'userName', 'userEmail', 'userRole', 'qualityScore', 'confidenceThreshold', 'createdAt', 'updatedAt']
    const faceProfilesCSV = arrayToCSV(reportData.data.faceProfiles.map(profile => ({
      id: profile.id,
      userName: profile.user?.name || '',
      userEmail: profile.user?.email || '',
      userRole: profile.user?.role || '',
      qualityScore: profile.qualityScore || '',
      confidenceThreshold: profile.confidenceThreshold || '',
      createdAt: profile.createdAt ? new Date(profile.createdAt).toLocaleString() : '',
      updatedAt: profile.updatedAt ? new Date(profile.updatedAt).toLocaleString() : ''
    })), faceProfileHeaders)
    sections.push(faceProfilesCSV)
  }

  const csvContent = sections.join('\n')
  return Buffer.from(csvContent, 'utf-8')
}

export async function generateAttendanceCSVReport(
  attendanceData: any[],
  dateRange: { startDate: Date | null; endDate: Date | null },
  generatedBy: any
): Promise<Buffer> {
  const sections: string[] = []

  // Header
  sections.push('Face Attendance System - Attendance Report')
  sections.push(`Generated On: ${new Date().toLocaleString()}`)
  sections.push(`Generated By: ${generatedBy.name} (${generatedBy.email})`)
  sections.push(`Date Range: ${dateRange.startDate && dateRange.endDate
    ? `${dateRange.startDate.toISOString().split('T')[0]} to ${dateRange.endDate.toISOString().split('T')[0]}`
    : 'All Time'}`)
  sections.push('')

  // Statistics
  sections.push('=== STATISTICS ===')
  sections.push(`Total Records: ${attendanceData.length}`)
  sections.push(`Valid Attendances: ${attendanceData.filter(a => a.isValid).length}`)
  sections.push(`Invalid Attendances: ${attendanceData.filter(a => !a.isValid).length}`)
  sections.push(`Face Recognition: ${attendanceData.filter(a => a.method === 'FACE_RECOGNITION').length}`)
  sections.push(`QR Code: ${attendanceData.filter(a => a.method === 'QR_CODE').length}`)
  sections.push(`Manual: ${attendanceData.filter(a => a.method === 'MANUAL').length}`)
  sections.push('')

  // Detailed records
  sections.push('=== DETAILED RECORDS ===')
  const headers = ['date', 'time', 'studentName', 'className', 'method', 'status', 'confidence', 'locationInfo']
  const attendanceCSV = arrayToCSV(attendanceData.map(record => ({
    date: record.timestamp ? new Date(record.timestamp).toLocaleDateString() : '',
    time: record.timestamp ? new Date(record.timestamp).toLocaleTimeString() : '',
    studentName: record.user?.name || '',
    className: record.class?.name || '',
    method: record.method || '',
    status: record.isValid ? 'Valid' : 'Invalid',
    confidence: record.confidenceScore || '',
    locationInfo: record.wifiSsid || record.ipAddress || ''
  })), headers)
  sections.push(attendanceCSV)

  const csvContent = sections.join('\n')
  return Buffer.from(csvContent, 'utf-8')
}

export async function generateUserCSVReport(
  userData: any[],
  generatedBy: any
): Promise<Buffer> {
  const sections: string[] = []

  // Header
  sections.push('Face Attendance System - User Report')
  sections.push(`Generated On: ${new Date().toLocaleString()}`)
  sections.push(`Generated By: ${generatedBy.name} (${generatedBy.email})`)
  sections.push('')

  // Statistics
  sections.push('=== STATISTICS ===')
  sections.push(`Total Users: ${userData.length}`)
  sections.push(`Students: ${userData.filter(u => u.role === 'STUDENT').length}`)
  sections.push(`Lecturers: ${userData.filter(u => u.role === 'LECTURER').length}`)
  sections.push(`Admins: ${userData.filter(u => u.role === 'ADMIN').length}`)
  sections.push(`Active Users: ${userData.filter(u => u.status === 'ACTIVE').length}`)
  sections.push(`Pending Users: ${userData.filter(u => u.status === 'PENDING').length}`)
  sections.push(`Face Enrolled Users: ${userData.filter(u => u.faceProfile).length}`)
  sections.push('')

  // User details
  sections.push('=== USER DETAILS ===')
  const headers = ['name', 'email', 'role', 'status', 'studentStaffId', 'phone', 'faceEnrolled', 'createdDate', 'lastLogin']
  const usersCSV = arrayToCSV(userData.map(user => ({
    name: user.name || '',
    email: user.email,
    role: user.role,
    status: user.status,
    studentStaffId: user.studentId || user.staffId || '',
    phone: user.phone || '',
    faceEnrolled: user.faceProfile ? 'Yes' : 'No',
    createdDate: user.createdAt ? new Date(user.createdAt).toLocaleDateString() : '',
    lastLogin: user.lastLogin ? new Date(user.lastLogin).toLocaleDateString() : 'Never'
  })), headers)
  sections.push(usersCSV)

  const csvContent = sections.join('\n')
  return Buffer.from(csvContent, 'utf-8')
}