// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  LECTURER
  STUDENT
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum AttendanceMethod {
  FACE_RECOGNITION
  QR_CODE
  MANUAL
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum RegistrationStep {
  BASIC_INFO
  DOCUMENT_UPLOAD
  FACE_ENROLLMENT
  VERIFICATION
  COMPLETED
}

enum DocumentType {
  STUDENT_ID
  STAFF_ID
  PASSPORT
  NATIONAL_ID
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVIEW
}

model User {
  id                String     @id @default(cuid())
  email             String     @unique
  name              String
  studentId         String?    @unique @map("student_id")
  phone             String?
  role              UserRole   @default(STUDENT)
  status            UserStatus @default(PENDING)
  password          String?
  emailVerified     DateTime?  @map("email_verified")
  phoneVerified     DateTime?  @map("phone_verified")
  image             String?
  department        String?
  year              Int?
  semester          Int?
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")
  approvedAt        DateTime?  @map("approved_at")
  approvedBy        String?    @map("approved_by")
  lastLoginAt       DateTime?  @map("last_login_at")
  
  // Relations
  faceProfile       FaceProfile?
  registrationSteps RegistrationStep[]
  documents         DocumentVerification[]
  attendances       Attendance[]
  enrollments       Enrollment[]
  classesTeaching   Class[]     @relation("ClassLecturer")
  sessions          Session[]
  approvals         UserApproval[] @relation("ApprovalUser")
  approvalsGiven    UserApproval[] @relation("ApprovalAdmin")
  qualityLogs       FaceQualityLog[]
  
  approver          User?       @relation("UserApprover", fields: [approvedBy], references: [id])
  approvedUsers     User[]      @relation("UserApprover")

  @@map("users")
}

model FaceProfile {
  id                   String   @id @default(cuid())
  userId               String   @unique @map("user_id")
  faceDescriptors      Json     @map("face_descriptors") // Array of 128-dimensional vectors
  qualityScore         Float    @map("quality_score")
  confidenceThreshold  Float    @default(0.85) @map("confidence_threshold")
  enrollmentImages     Json     @map("enrollment_images") // URLs to enrollment images
  isActive             Boolean  @default(true) @map("is_active")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  lastUsedAt           DateTime? @map("last_used_at")
  
  // Relations
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("face_profiles")
}

model RegistrationStep {
  id          String            @id @default(cuid())
  userId      String            @map("user_id")
  stepName    RegistrationStep  @map("step_name")
  status      VerificationStatus @default(PENDING)
  data        Json?             // Store step-specific data
  completedAt DateTime?         @map("completed_at")
  createdAt   DateTime          @default(now()) @map("created_at")
  
  // Relations
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, stepName])
  @@map("registration_steps")
}

model DocumentVerification {
  id           String             @id @default(cuid())
  userId       String             @map("user_id")
  documentType DocumentType       @map("document_type")
  filePath     String             @map("file_path")
  ocrData      Json?              @map("ocr_data") // Extracted text/data from OCR
  status       VerificationStatus @default(PENDING)
  verifiedAt   DateTime?          @map("verified_at")
  verifiedBy   String?            @map("verified_by")
  rejectionReason String?         @map("rejection_reason")
  createdAt    DateTime           @default(now()) @map("created_at")
  
  // Relations
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("document_verifications")
}

model UserApproval {
  id         String             @id @default(cuid())
  userId     String             @map("user_id")
  adminId    String             @map("admin_id")
  status     VerificationStatus @default(PENDING)
  reason     String?
  notes      String?
  reviewedAt DateTime?          @map("reviewed_at")
  createdAt  DateTime           @default(now()) @map("created_at")
  
  // Relations
  user       User               @relation("ApprovalUser", fields: [userId], references: [id], onDelete: Cascade)
  admin      User               @relation("ApprovalAdmin", fields: [adminId], references: [id])

  @@map("user_approvals")
}

model FaceQualityLog {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  imagePath         String   @map("image_path")
  qualityScores     Json     @map("quality_scores") // Detailed quality metrics
  validationResults Json     @map("validation_results") // Pass/fail for different checks
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("face_quality_logs")
}

model Location {
  id             String  @id @default(cuid())
  name           String
  building       String?
  floor          String?
  room           String?
  wifiSsid       String? @map("wifi_ssid")
  wifiSecurity   String? @map("wifi_security")
  gpsCoordinates Json?   @map("gps_coordinates") // {lat, lng}
  capacity       Int?
  isActive       Boolean @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  
  // Relations
  classes        Class[]

  @@map("locations")
}

model Class {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?
  lecturerId  String   @map("lecturer_id")
  locationId  String?  @map("location_id")
  schedule    Json     // {day, startTime, endTime, duration}
  capacity    Int?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  lecturer    User     @relation("ClassLecturer", fields: [lecturerId], references: [id])
  location    Location? @relation(fields: [locationId], references: [id])
  enrollments Enrollment[]
  attendances Attendance[]

  @@map("classes")
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  classId    String   @map("class_id")
  enrolledAt DateTime @default(now()) @map("enrolled_at")
  isActive   Boolean  @default(true) @map("is_active")
  
  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  class      Class    @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([userId, classId])
  @@map("enrollments")
}

model Attendance {
  id               String           @id @default(cuid())
  userId           String           @map("user_id")
  classId          String           @map("class_id")
  status           AttendanceStatus @default(PRESENT)
  method           AttendanceMethod @default(FACE_RECOGNITION)
  timestamp        DateTime         @default(now())
  checkInTime      DateTime?        @map("check_in_time")
  checkOutTime     DateTime?        @map("check_out_time")
  ipAddress        String?          @map("ip_address")
  wifiSsid         String?          @map("wifi_ssid")
  gpsCoordinates   Json?            @map("gps_coordinates")
  confidenceScore  Float?           @map("confidence_score")
  deviceInfo       Json?            @map("device_info")
  notes            String?
  verifiedBy       String?          @map("verified_by")
  createdAt        DateTime         @default(now()) @map("created_at")
  
  // Relations
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  class            Class            @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([userId, classId, timestamp])
  @@map("attendances")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  token        String   @unique
  deviceInfo   Json?    @map("device_info")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  expiresAt    DateTime @map("expires_at")
  lastActivity DateTime @default(now()) @map("last_activity")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  description String?
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("system_configs")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id")
  action    String
  resource  String
  details   Json?
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  timestamp DateTime @default(now())

  @@map("audit_logs")
}