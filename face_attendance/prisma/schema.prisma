generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  deviceInfo   String?  @map("device_info") @db.Text
  ipAddress    String?  @map("ip_address")
  lastActivity DateTime @default(now()) @map("last_activity")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String                  @unique
  emailVerified          DateTime?               @map("email_verified")
  image                  String?
  phone                  String?                 @unique
  phoneVerified          DateTime?               @map("phone_verified")
  studentId              String?                 @unique @map("student_id")
  staffId                String?                 @unique @map("staff_id")
  role                   UserRole                @default(STUDENT)
  status                 UserStatus              @default(PENDING)
  faceEnrollmentStatus   FaceEnrollmentStatus    @default(NOT_ENROLLED) @map("face_enrollment_status")
  documentVerified       Boolean                 @default(false) @map("document_verified")
  termsAccepted          Boolean                 @default(false) @map("terms_accepted")
  gdprConsent            Boolean                 @default(false) @map("gdpr_consent")
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  approvedAt             DateTime?               @map("approved_at")
  approvedById           String?                 @map("approved_by_id")
  lastLogin              DateTime?               @map("last_login")

  approvedBy             User?                   @relation("UserApprovals", fields: [approvedById], references: [id])
  approvals              User[]                  @relation("UserApprovals")
  accounts               Account[]
  sessions               Session[]
  faceProfile            FaceProfile?
  documentVerifications  DocumentVerification[]
  registrationSteps      RegistrationStep[]
  userApprovals          UserApproval[]
  enrollments            Enrollment[]
  attendances            Attendance[]
  classesAsLecturer      Class[]                @relation("ClassLecturer")
  faceQualityLogs        FaceQualityLog[]
  auditLogs              AuditLog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model FaceProfile {
  id                   String   @id @default(cuid())
  userId               String   @unique @map("user_id")
  faceDescriptors      Json     @map("face_descriptors")
  qualityScore         Float    @map("quality_score")
  confidenceThreshold  Float    @default(0.6) @map("confidence_threshold")
  enrollmentImages     Json     @map("enrollment_images")
  antiSpoofingData     Json?    @map("anti_spoofing_data")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("face_profiles")
}

model Class {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?  @db.Text
  lecturerId  String   @map("lecturer_id")
  locationId  String   @map("location_id")
  schedule    Json
  duration    Int
  capacity    Int
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  lecturer    User         @relation("ClassLecturer", fields: [lecturerId], references: [id])
  location    Location     @relation(fields: [locationId], references: [id])
  enrollments Enrollment[]
  attendances Attendance[]

  @@map("classes")
}

model Location {
  id               String  @id @default(cuid())
  name             String
  building         String
  floor            String
  room             String
  wifiSsid         String  @map("wifi_ssid")
  wifiSecurity     String? @map("wifi_security")
  gpsCoordinates   Json?   @map("gps_coordinates")
  capacity         Int
  isActive         Boolean @default(true) @map("is_active")
  additionalInfo   Json?   @map("additional_info")

  classes Class[]

  @@unique([building, floor, room])
  @@map("locations")
}

model Enrollment {
  id         String           @id @default(cuid())
  userId     String           @map("user_id")
  classId    String           @map("class_id")
  status     EnrollmentStatus @default(ACTIVE)
  enrolledAt DateTime         @default(now()) @map("enrolled_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([userId, classId])
  @@map("enrollments")
}

model Attendance {
  id               String          @id @default(cuid())
  userId           String          @map("user_id")
  classId          String          @map("class_id")
  timestamp        DateTime        @default(now())
  method           AttendanceMethod @default(FACE_RECOGNITION)
  ipAddress        String?         @map("ip_address")
  wifiSsid         String?         @map("wifi_ssid")
  gpsCoordinates   Json?           @map("gps_coordinates")
  confidenceScore  Float?          @map("confidence_score")
  deviceInfo       Json?           @map("device_info")
  isValid          Boolean         @default(true) @map("is_valid")
  verifiedAt       DateTime?       @map("verified_at")
  notes            String?         @db.Text

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@map("attendances")
}

model RegistrationStep {
  id          String                 @id @default(cuid())
  userId      String                 @map("user_id")
  stepName    RegistrationStepName   @map("step_name")
  status      RegistrationStepStatus @default(NOT_STARTED)
  data        Json?
  completedAt DateTime?              @map("completed_at")
  createdAt   DateTime               @default(now()) @map("created_at")
  updatedAt   DateTime               @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, stepName])
  @@map("registration_steps")
}

model DocumentVerification {
  id           String                    @id @default(cuid())
  userId       String                    @map("user_id")
  documentType DocumentType              @map("document_type")
  fileName     String                    @map("file_name")
  filePath     String                    @map("file_path")
  fileSize     Int                       @map("file_size")
  mimeType     String                    @map("mime_type")
  ocrData      Json?                     @map("ocr_data")
  status       DocumentVerificationStatus @default(PENDING)
  verifiedAt   DateTime?                 @map("verified_at")
  verifiedById String?                   @map("verified_by_id")
  rejectionReason String?                @map("rejection_reason") @db.Text
  createdAt    DateTime                  @default(now()) @map("created_at")
  updatedAt    DateTime                  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("document_verifications")
}

model UserApproval {
  id         String               @id @default(cuid())
  userId     String               @map("user_id")
  adminId    String               @map("admin_id")
  status     UserApprovalStatus   @default(PENDING)
  reason     String?              @db.Text
  notes      String?              @db.Text
  reviewedAt DateTime?            @map("reviewed_at")
  createdAt  DateTime             @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_approvals")
}

model FaceQualityLog {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  imagePath         String?  @map("image_path")
  qualityScores     Json     @map("quality_scores")
  validationResults Json     @map("validation_results")
  passed            Boolean  @default(false)
  createdAt         DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("face_quality_logs")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id")
  action    String
  resource  String
  details   Json?
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model OTP {
  id        String   @id @default(cuid())
  code      String
  email     String
  purpose   String   @default("EMAIL_VERIFICATION")
  expiresAt DateTime @map("expires_at")
  attempts  Int      @default(0)
  isUsed    Boolean  @default(false) @map("is_used")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([email, purpose])
  @@index([expiresAt])
  @@map("otps")
}

// Enums
enum UserRole {
  STUDENT
  LECTURER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
  REJECTED
}

enum FaceEnrollmentStatus {
  NOT_ENROLLED
  IN_PROGRESS
  ENROLLED
  NEEDS_UPDATE
  FAILED
}

enum EnrollmentStatus {
  ACTIVE
  INACTIVE
  DROPPED
}

enum AttendanceMethod {
  FACE_RECOGNITION
  QR_CODE
  MANUAL
  BACKUP
}

enum RegistrationStepName {
  BASIC_INFO
  DOCUMENT_UPLOAD
  FACE_ENROLLMENT
  CONTACT_VERIFICATION
  ADMIN_APPROVAL
}

enum RegistrationStepStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
  SKIPPED
}

enum DocumentType {
  STUDENT_ID
  STAFF_ID
  NATIONAL_ID
  PASSPORT
  DRIVING_LICENSE
}

enum DocumentVerificationStatus {
  PENDING
  PROCESSING
  APPROVED
  REJECTED
  NEEDS_RESUBMISSION
}

enum UserApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_MORE_INFO
}