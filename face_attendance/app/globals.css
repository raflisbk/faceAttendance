// app/layout.tsx
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import { Providers } from './providers'
import { Toaster } from '@/components/ui/toaster'
import { AuthGuard } from '@/components/auth/AuthGuard'
import { cn } from '@/lib/utils'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Face Attendance System',
  description: 'Advanced face recognition attendance system for educational institutions',
  keywords: 'face recognition, attendance, education, biometric, AI',
  authors: [{ name: 'Face Attendance Team' }],
  viewport: 'width=device-width, initial-scale=1, maximum-scale=1',
  themeColor: '#0f172a',
  manifest: '/manifest.json',
  icons: {
    icon: '/favicon.ico',
    apple: '/apple-touch-icon.png',
  },
  openGraph: {
    title: 'Face Attendance System',
    description: 'Advanced face recognition attendance system',
    type: 'website',
    siteName: 'Face Attendance System',
  },
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
        <meta name="apple-mobile-web-app-title" content="Face Attendance" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
      </head>
      <body className={cn(inter.className, "antialiased bg-slate-950 text-white")}>
        <Providers>
          <AuthGuard>
            {children}
          </AuthGuard>
          <Toaster />
        </Providers>
      </body>
    </html>
  )
}

// app/providers.tsx
'use client'

import { ReactNode } from 'react'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'
import { AuthProvider } from '@/providers/AuthProvider'
import { ThemeProvider } from '@/providers/ThemeProvider'
import { PWAProvider } from '@/providers/PWAProvider'

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      gcTime: 10 * 60 * 1000, // 10 minutes
      retry: 2,
      refetchOnWindowFocus: false,
    },
  },
})

interface ProvidersProps {
  children: ReactNode
}

export function Providers({ children }: ProvidersProps) {
  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider
        attribute="class"
        defaultTheme="dark"
        enableSystem={false}
        disableTransitionOnChange
      >
        <AuthProvider>
          <PWAProvider>
            {children}
          </PWAProvider>
        </AuthProvider>
      </ThemeProvider>
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  )
}

// middleware.ts
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { jwtVerify } from 'jose'

const JWT_SECRET = new TextEncoder().encode(
  process.env.JWT_SECRET || 'your-secret-key'
)

// Public routes that don't require authentication
const publicRoutes = [
  '/',
  '/login',
  '/register',
  '/forgot-password',
  '/reset-password',
  '/api/auth/login',
  '/api/auth/register',
  '/api/auth/forgot-password',
  '/api/auth/reset-password',
  '/api/health',
  '/manifest.json',
  '/sw.js',
  '/favicon.ico',
]

// Admin-only routes
const adminRoutes = [
  '/admin',
]

// Lecturer routes
const lecturerRoutes = [
  '/lecturer',
]

// Student routes
const studentRoutes = [
  '/student',
]

// API routes that require specific roles
const roleBasedApiRoutes = {
  admin: [
    '/api/admin',
    '/api/users',
    '/api/classes',
    '/api/locations',
  ],
  lecturer: [
    '/api/lecturer',
    '/api/classes',
    '/api/attendance/qr-code/generate',
  ],
  student: [
    '/api/student',
    '/api/attendance/check-in',
    '/api/attendance/history',
  ]
}

function isPublicRoute(pathname: string): boolean {
  return publicRoutes.some(route => {
    if (route === '/') return pathname === '/'
    return pathname.startsWith(route)
  })
}

function getRequiredRole(pathname: string): string | null {
  if (adminRoutes.some(route => pathname.startsWith(route))) {
    return 'ADMIN'
  }
  if (lecturerRoutes.some(route => pathname.startsWith(route))) {
    return 'LECTURER'
  }
  if (studentRoutes.some(route => pathname.startsWith(route))) {
    return 'STUDENT'
  }
  
  // Check API routes
  for (const [role, routes] of Object.entries(roleBasedApiRoutes)) {
    if (routes.some(route => pathname.startsWith(route))) {
      return role.toUpperCase()
    }
  }
  
  return null
}

async function verifyToken(token: string) {
  try {
    const { payload } = await jwtVerify(token, JWT_SECRET)
    return payload
  } catch (error) {
    return null
  }
}

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl
  
  // Skip middleware for static files and API routes that don't need auth
  if (
    pathname.includes('/_next/') ||
    pathname.includes('/api/_') ||
    pathname.includes('.') ||
    isPublicRoute(pathname)
  ) {
    return NextResponse.next()
  }

  // Get token from cookie
  const token = request.cookies.get('auth-token')?.value

  // If no token, redirect to login
  if (!token) {
    const loginUrl = new URL('/login', request.url)
    loginUrl.searchParams.set('redirect', pathname)
    return NextResponse.redirect(loginUrl)
  }

  // Verify token
  const payload = await verifyToken(token)
  if (!payload) {
    const loginUrl = new URL('/login', request.url)
    loginUrl.searchParams.set('redirect', pathname)
    const response = NextResponse.redirect(loginUrl)
    response.cookies.delete('auth-token')
    return response
  }

  const userRole = payload.role as string
  const userId = payload.userId as string

  // Check role-based access
  const requiredRole = getRequiredRole(pathname)
  if (requiredRole && userRole !== requiredRole) {
    // Redirect to appropriate dashboard based on user role
    let redirectPath = '/'
    switch (userRole) {
      case 'ADMIN':
        redirectPath = '/admin/dashboard'
        break
      case 'LECTURER':
        redirectPath = '/lecturer/dashboard'
        break
      case 'STUDENT':
        redirectPath = '/student/dashboard'
        break
    }
    return NextResponse.redirect(new URL(redirectPath, request.url))
  }

  // Add user info to headers for API routes
  if (pathname.startsWith('/api/')) {
    const requestHeaders = new Headers(request.headers)
    requestHeaders.set('x-user-id', userId)
    requestHeaders.set('x-user-role', userRole)
    requestHeaders.set('x-user-email', payload.email as string)

    return NextResponse.next({
      request: {
        headers: requestHeaders,
      },
    })
  }

  // Handle root path redirect based on role
  if (pathname === '/') {
    let redirectPath = '/login'
    switch (userRole) {
      case 'ADMIN':
        redirectPath = '/admin/dashboard'
        break
      case 'LECTURER':
        redirectPath = '/lecturer/dashboard'
        break
      case 'STUDENT':
        redirectPath = '/student/dashboard'
        break
    }
    return NextResponse.redirect(new URL(redirectPath, request.url))
  }

  return NextResponse.next()
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public (public files)
     */
    '/((?!_next/static|_next/image|favicon.ico|public).*)',
  ],
}

// app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 84% 4.9%;
    
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    
    --ring: 212.7 26.8% 83.9%;
    
    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
  
  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }
  
  ::-webkit-scrollbar-track {
    @apply bg-slate-900;
  }
  
  ::-webkit-scrollbar-thumb {
    @apply bg-slate-700 rounded-md;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    @apply bg-slate-600;
  }
}

/* Blackboard theme styles */
@layer components {
  .blackboard-bg {
    background: linear-gradient(
      135deg,
      #0f172a 0%,
      #1e293b 50%,
      #0f172a 100%
    );
    position: relative;
  }
  
  .blackboard-bg::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: 
      radial-gradient(circle at 25% 25%, rgba(255, 255, 255, 0.02) 2px, transparent 2px),
      radial-gradient(circle at 75% 75%, rgba(255, 255, 255, 0.02) 2px, transparent 2px);
    background-size: 50px 50px;
    pointer-events: none;
  }
  
  .chalk-text {
    color: #f8fafc;
    text-shadow: 0 0 10px rgba(248, 250, 252, 0.3);
  }
  
  .chalk-border {
    border: 2px solid rgba(248, 250, 252, 0.2);
    box-shadow: 
      0 0 0 1px rgba(248, 250, 252, 0.1),
      inset 0 0 0 1px rgba(248, 250, 252, 0.1);
  }
  
  /* Grid pattern */
  .bg-grid-white {
    background-image: 
      linear-gradient(rgba(255, 255, 255, 0.02) 1px, transparent 1px),
      linear-gradient(90deg, rgba(255, 255, 255, 0.02) 1px, transparent 1px);
  }
  
  /* Loading animations */
  @keyframes pulse-slow {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
  
  .animate-pulse-slow {
    animation: pulse-slow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  /* Face capture overlay */
  .face-overlay {
    position: relative;
  }
  
  .face-overlay::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 200px;
    height: 250px;
    border: 3px solid rgba(34, 197, 94, 0.8);
    border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%;
    transform: translate(-50%, -50%);
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(34, 197, 94, 0.7);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(34, 197, 94, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(34, 197, 94, 0);
    }
  }
  
  /* Status indicators */
  .status-online {
    @apply bg-green-500;
    box-shadow: 0 0 0 2px rgba(34, 197, 94, 0.3);
  }
  
  .status-offline {
    @apply bg-gray-500;
    box-shadow: 0 0 0 2px rgba(107, 114, 128, 0.3);
  }
  
  .status-away {
    @apply bg-yellow-500;
    box-shadow: 0 0 0 2px rgba(245, 158, 11, 0.3);
  }
  
  .status-busy {
    @apply bg-red-500;
    box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.3);
  }
}

/* PWA specific styles */
@media (display-mode: standalone) {
  body {
    padding-top: env(safe-area-inset-top);
    padding-bottom: env(safe-area-inset-bottom);
  }
}

/* Face recognition specific styles */
.camera-frame {
  position: relative;
  width: 100%;
  max-width: 640px;
  aspect-ratio: 4/3;
  background: #000;
  border-radius: 12px;
  overflow: hidden;
}

.camera-video {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.face-detection-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.face-box {
  position: absolute;
  border: 2px solid #22c55e;
  border-radius: 4px;
  box-shadow: 0 0 0 2px rgba(34, 197, 94, 0.3);
}

.face-landmarks {
  position: absolute;
  width: 2px;
  height: 2px;
  background: #22c55e;
  border-radius: 50%;
}

/* QR Code styles */
.qr-scanner {
  position: relative;
  width: 100%;
  max-width: 400px;
  aspect-ratio: 1;
  background: #000;
  border-radius: 12px;
  overflow: hidden;
}

.qr-overlay {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 80%;
  height: 80%;
  border: 2px solid #22c55e;
  border-radius: 12px;
  transform: translate(-50%, -50%);
}

.qr-overlay::before {
  content: '';
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  border: 2px solid transparent;
  border-radius: 12px;
  background: linear-gradient(45deg, #22c55e, transparent, #22c55e) border-box;
  -webkit-mask: linear-gradient(#fff 0 0) padding-box, linear-gradient(#fff 0 0);
  mask: linear-gradient(#fff 0 0) padding-box, linear-gradient(#fff 0 0);
  -webkit-mask-composite: subtract;
  mask-composite: subtract;
  animation: qr-scan 2s linear infinite;
}

@keyframes qr-scan {
  0% {
    transform: translateY(-100%);
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
  100% {
    transform: translateY(100%);
    opacity: 0;
  }
}

/* Print styles */
@media print {
  .no-print {
    display: none !important;
  }
  
  body {
    background: white !important;
    color: black !important;
  }
  
  .bg-slate-950,
  .bg-slate-900 {
    background: white !important;
  }
  
  .text-white {
    color: black !important;
  }
}
